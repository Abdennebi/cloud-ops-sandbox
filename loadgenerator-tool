#!/usr/bin/env python
"""Generate fake traffic for Stackdriver Sandbox

A command line tool to start and stop generating load for Stackdriver Sandbox.
Manages load generation jobs running on GCP by spinning up and tearing down
Compute Engine instances running the loadgenerator defined under /src/loadgenerator.

Usage:
    ./loadgenerator-tool -h

Quickstart:
    ./loadgenerator-tool startup --zone us-central1-c SANDBOX_FRONTEND_ADDRESS
"""

import argparse
import os
import random
import shlex
import string
import subprocess

DEVNULL = open(os.devnull, 'w')

def _startup(args):
    """Start a load generator job on Google Cloud Platform

    args.target_ip -- the IP address to send load to
    args.zone -- the Google Compute Engine zone to send load from
    args.scenarios -- the load generator scenarios to run
    """
    uuid = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(4))

    command = (
        'gcloud compute instances create-with-container loadgenerator-{0}'
        ' --zone={2}'
        ' --machine-type=f1-micro'
        ' --container-image=gcr.io/stackdriver-sandbox-230822/sandbox/loadgenerator:latest'
        ' --container-env=\"FRONTEND_ADDR={1}\"'
        ).format(uuid, args.target_ip, args.zone)

    if args.scenarios:
        for s in args.scenarios:
            command = command + ' --container-arg={0}'.format(s)

    subprocess.call(['echo'] + shlex.split(command))
    subprocess.Popen(shlex.split(command), stdout=DEVNULL)


def _list(args):
    """List all load generator jobs running on Google Cloud Platform"""
    command = 'gcloud compute instances list --filter=name~\'loadgenerator*\''
    subprocess.call(['echo'] + shlex.split(command))
    subprocess.call(shlex.split(command))


def _teardown(args):
    """Teardown a load generator job running on Google Cloud Platform

    args.name -- the name of the instance running the job
    args.zone -- the Google Compute Engine zone the job is in
    """
    for n in args.names:
        command = 'gcloud compute instances delete {0} --zone {1} -q'.format(n, args.zone)
        subprocess.call(['echo'] + shlex.split(command))
        subprocess.Popen(shlex.split(command), stdout=DEVNULL)


def _check_prereqs():
    try:
        subprocess.check_call(shlex.split('gcloud version'),
                stdout=DEVNULL, stderr=DEVNULL)
        return True
    except subprocess.CalledProcessError:
        print("Missing Prerequisite: can't find command 'gcloud'. "
                "It appears the Google Cloud SDK has not been installed. "
                "To install, follow this link: https://cloud.google.com/sdk/install")
        return False


def main(args):
    if _check_prereqs():
        args.func(args)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog='loadgenerator-tool')
    subparsers = parser.add_subparsers()

    parser_startup = subparsers.add_parser('startup', help='startup a load generator job')
    parser_startup.add_argument('target_ip', help='the target ip address to send load to')
    parser_startup.add_argument('--zone', required=True, help='the Google Compute Engine zone to send load from')
    parser_startup.add_argument('--scenarios', metavar='S', dest='scenarios', type=str, nargs='+', help='a load generator scenario to run [if unspecified, runs all available scenarios]')
    parser_startup.set_defaults(func=_startup)

    parser_list = subparsers.add_parser('list', help='list all active load generator job')
    parser_list.set_defaults(func=_list)

    parser_teardown = subparsers.add_parser('teardown', help='teardown a load generator job')
    parser_teardown.add_argument('names', metavar='N', type=str, nargs='+', help='a name of an instance to teardown')
    parser_teardown.add_argument('--zone', required=True, help='the Google Compute Engine zone the job is in')
    parser_teardown.set_defaults(func=_teardown)

    main(parser.parse_args())
